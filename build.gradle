apply plugin: 'com.android.library'

version = "0.9.4"

android {
    compileSdkVersion conf.compileSdkVersion
    resourcePrefix "weex"

    useLibrary 'org.apache.http.legacy'
    copy {
        from '../../pre-build'
        into new File(projectDir,"assets")
        include 'native-bundle-main.js'
        rename('native-bundle-main.js','main.js')
    }
    def line
    new File(projectDir,"assets/main.js").withReader { line = it.readLine() }
    def m = line =~ /[A-Z\s]+\s+([0-9\.]+),\s+Build\s+[0-9]+/;
    def jsfmVersion = m[0][1]
    println jsfmVersion

    if(project.hasProperty('asfRelease')){
        //download so file if not exist, when compile in source release
        download{
            src 'https://git-wip-us.apache.org/repos/asf?p=incubator-weex.git;a=blob_plain;f=android/sdk/libs/armeabi/libweexjsc.so;hb=refs/heads/master'
            dest "${projectDir}/libs/armeabi/libweexjsc.so"
            overwrite false
        }
        download{
            src 'https://git-wip-us.apache.org/repos/asf?p=incubator-weex.git;a=blob_plain;f=android/sdk/libs/x86/libweexjsc.so;hb=refs/heads/master'
            dest "${projectDir}/libs/x86/libweexjsc.so"
            overwrite false
        }
    }

    def ARMEABI_Size = new File(projectDir,"libs/armeabi/libweexjsc.so").length();
    def X86_Size = new File(projectDir,"libs/x86/libweexjsc.so").length();
    println "ARMEABI_Size: "+ARMEABI_Size;
    println "X86_Size:" + X86_Size;

    defaultConfig {
        buildConfigField "long", "ARMEABI_Size", "${ARMEABI_Size}"
        buildConfigField "long", "X86_Size", "${X86_Size}"
        buildConfigField "String", "buildJavascriptFrameworkVersion", "\"${jsfmVersion}\""
        buildConfigField "String", "buildVersion", "\"${version}\""
        minSdkVersion 15
        targetSdkVersion conf.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_TRACE", "false"
        }

        debug {
            testCoverageEnabled false
            buildConfigField "boolean", "ENABLE_TRACE", "true"
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['assets']
            jniLibs.srcDir(['libs'])
            java {
                srcDirs = ["src/main/java"];
            }
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    compileOptions.encoding = "UTF-8"
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$support"
    implementation "com.android.support:recyclerview-v7:$support"
    implementation "com.android.support:support-v4:$support"
    implementation "com.alibaba:fastjson:$fastjson"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.javassist:javassist:3.20.0-GA'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.objenesis:objenesis:2.1'
    testImplementation 'org.powermock:powermock-core:1.6.4'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4-common:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4-legacy:1.6.4'
    testImplementation 'org.powermock:powermock-module-testng:1.6.4'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.4'
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.4"
    testImplementation 'org.robolectric:robolectric:3.3.2'
    testImplementation "org.robolectric:shadows-httpclient:3.3.2"
    testImplementation 'org.json:json:20171018'
}

ext {
    bintrayRepo = 'dsq'
    bintrayName = 'weex-sdk'

    publishedGroupId = 'com.stone.kuainiugroup'
    libraryName = 'weex-sdk'
    artifact = 'weex-sdk'

    libraryVersion = '1.0.3'

    libraryDescription = 'Weex SDK 的再打包,基于官方0.9.4版本'

    siteUrl = 'https://github.com/xiaqu-stone/weex-sdk'
    gitUrl = 'https://github.com/xiaqu-stone/weex-sdk.git'

    developerId = 'stone'
    developerName = 'xiaqu-stone'
    developerEmail = 'stone.xiaqu@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply from: "../install.gradle"
apply from: "../bintray.gradle"